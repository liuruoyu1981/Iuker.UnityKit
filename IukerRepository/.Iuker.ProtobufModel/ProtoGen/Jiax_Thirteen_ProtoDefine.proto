message LMessageBase
{
    optional int32 type = 1;
    optional string mainId = 2;
    optional string subId = 3;
    optional bytes dataContent = 4;
    optional string key = 5;
    optional int64 userId = 6;
    optional int32 cmdId = 7;
}

message CTS_LHandshakeMQData
{
    optional int32 type = 1;
}

message EconomyInfo
{
    optional int64 userId = 1;
    optional int64 gold = 2;
    optional int32 diamond = 3;
    optional int32 payCount = 4;
    optional int32 payTotal = 5;
    optional int64 lastPayTime = 6;
    optional int32 mobileCharge = 7;
    optional int64 inviteUid = 8;
    optional int32 inviteCount = 9;
    optional int32 inviteTotal = 10;
}

message SocialInfo
{
    optional int64 userId = 1;
    optional string nickname = 2;
    optional int32 gender = 3;
    optional string headImg = 4;
    optional string introduce = 5;
    optional string mobile = 6;
    optional string idcard = 7;
    optional string country = 8;
    optional string province = 9;
    optional int32 city = 10;
    optional string address = 11;
}

message CTS_GetUserInfoMsg
{
    optional int64 userId = 1;
}

message CTS_LoginMsg
{
    optional int64 userId = 1;
    optional string machineCode = 2;
    optional string account = 3;
    optional string password = 4;
    optional string comeFrom = 5;
    optional string sessionid = 6;
    optional int32 regChannel = 7;
    optional string os = 8;
    optional string IMEI = 9;
    optional string loginIp = 10;
    optional SocialInfo socialInfo = 11;
}

message CTS_PlatformLoginMsg
{
    optional int64 userId = 1;
    optional string comeFrom = 2;
    optional string sessionid = 3;
    optional string refreshToken = 4;
    optional int32 regChannel = 5;
    optional string os = 6;
    optional string IMEI = 7;
    optional string loginIp = 8;
}

message STC_ErrorMsgMsg
{
    optional int32 errId = 1;
    optional string errMsg = 2;
}

message CTS_Record_Gdy_InfoMsg
{
    optional int64 shareId = 1;
}

message CTS_Record_List_RoomMsg
{
    optional int64 tableId = 1;
}

message CTS_Record_List_UserMsg
{
    optional int32 id = 1;
}

message CTS_Record_ShareMsg
{
    optional int64 tableId = 1;
    optional int32 handId = 2;
}

message STC_Record_List_UserMsg
{
    repeated UserRecord userRecordList = 1;
}

message UserRecord
{
    optional int64 tableId = 1;
    optional int32 gameType = 2;
    optional int64 date = 3;
    optional int64 masterUserId = 4;
    repeated SettleResult result = 5;
}

message SettleResult
{
    optional int64 userId = 1;
    optional int32 posId = 2;
    optional string nickName = 3;
    optional int32 score = 4;
}

message STC_Record_Share_ResultMsg
{
    optional int64 shareId = 1;
}

message CTS_Jiaxin_Table_ActInTableMsg
{
    optional int64 tableId = 1;
}

message CTS_Jiaxin_Table_CreateMsg
{
    optional int32 gameId = 1;
    optional int64 tableId = 2;
    optional string tableName = 3;
    optional int32 handNum = 4;
    optional int32 postionNum = 5;
    optional int32 specialType = 6;
}

message CTS_Jiaxin_Table_DissolveRequestMsg
{
    optional int64 tableId = 1;
}

message CTS_Jiaxin_Table_DissolveVoteMsg
{
    optional int64 tableId = 1;
    optional int32 vote = 2;
}

message CTS_Jiaxin_Table_HeartbeatMsg
{
    optional int64 tableId = 1;
}

message STC_Jiaxin_Table_DissolveRequestMsg
{
    optional int64 tableId = 1;
    optional int64 userId = 2;
    optional string nickName = 3;
    optional TeoError error = 4;
    optional int32 result = 5;
}

message TeoError
{
    optional int32 errId = 1;
    optional string errMsg = 2;
    optional bool isShow = 3;
}

message STC_Jiaxin_Table_DissolveResultMsg
{
    optional int64 tableId = 1;
    optional int32 result = 2;
}

message STC_Jiaxin_Table_DissolveVoteMsg
{
    optional int64 tableId = 1;
    optional int64 reqUserId = 2;
    optional string reqNickName = 3;
}

message STC_Jiaxin_Table_DissolveVoteResultMsg
{
    optional int64 tableId = 1;
    optional int32 result = 2;
    optional int64 userId = 3;
}

message STC_Jiaxin_Table_HeartbeatMsg
{
    optional int64 tableId = 1;
}

message CTS_Ssz_OperateMsg
{
    optional int64 tableId = 1;
    repeated int32 cards = 2;
}

message CTS_Ssz_ReadyMsg
{
    optional int64 tableId = 1;
    optional int32 value = 2;
}

message STC_Ssz_OperateMsg
{
    optional int64 tableId = 1;
    optional bool succeed = 2;
}

message STC_Ssz_ReadyMsg
{
    optional int64 tableId = 1;
    optional int32 value = 2;
    optional int32 posId = 3;
}

message STC_Ssz_StartMsg
{
    optional int64 tableId = 1;
    optional int32 bankId = 2;
    optional int32 handId = 3;
    repeated int32 priCards = 4;
}

message STC_Ssz_SettleMsg
{
    optional int64 tableId = 1;
    optional int32 winPosId = 2;
    repeated SszSettleItem settleLst = 3;
}

message SszSettleItem
{
    optional int32 posId = 1;
    repeated CompareInfo scoreInfo = 2;
    repeated int32 shootGradeList = 3;
    repeated int32 specialScore = 4;
    optional bool allKill = 5;
    optional int32 sumScore = 6;
    repeated int32 cardList = 7;
    repeated int32 cardType = 8;
}

message CompareInfo
{
    optional int32 posId = 1;
    repeated int32 scoreList = 2;
}

message STC_Jiaxin_TableSettleMsg
{
    optional int64 tableId = 1;
    optional string tableName = 2;
    optional int32 handTotal = 3;
    optional int64 createTime = 4;
    optional int64 finishTime = 5;
    optional string masterUserHeadImg = 6;
    optional int32 seatNum = 7;
    repeated PlayerJiaxinGrade gradeList = 8;
}

message PlayerJiaxinGrade
{
    optional int32 posId = 1;
    optional int32 winCount = 2;
    optional int32 loseCount = 3;
    optional int32 tieCount = 4;
    optional int32 gradeCount = 5;
}

message STC_JiaXin_Table_Again_NotificaMsg
{
    optional int32 gameId = 1;
    optional int64 tableId = 2;
}

message CTS_Jiaxin_Table_AgainMsg
{
    optional int32 gameId = 1;
    optional int64 tableId = 2;
    optional string tableName = 3;
    optional int32 handNum = 4;
    optional int32 postionNum = 5;
    optional int32 specialType = 6;
    repeated int64 userIds = 7;
}

message STC_Jiaxin_Table_CreateMsg
{
    optional int32 gameId = 1;
    optional int64 tableId = 2;
    optional string tableName = 3;
    optional int32 handNum = 4;
    optional int32 postionNum = 5;
    optional int32 specialType = 6;
    optional CreateJiaxinResult createResult = 7;
    optional TeoError error = 8;
}

message CreateJiaxinResult
{
    optional int64 masterId = 1;
    optional int32 password = 2;
    optional int64 tableId = 3;
    optional int64 createTime = 4;
}

message STC_JiaXin_Table_User_OnlineMsg
{
    optional int64 tableId = 1;
    optional int32 status = 2;
    optional int32 posId = 3;
}

message CTS_Lobby_HeartbeatMsg
{
    optional int64 id = 1;
}

message STC_Lobby_HeartbeatMsg
{
    optional int64 id = 1;
}

message STC_JiaXin_Table_Quit_ResultMsg
{
    optional int64 tableId = 1;
    optional bool success = 2;
}

message CTS_JiaXin_Table_QuitMsg
{
    optional int64 tableId = 1;
}

message CTS_Ssz_ContinueMsg
{
    optional int64 tableId = 1;
}

message CTS_Ssz_OfflineMsg
{
    optional int64 tableId = 1;
}

message UserStatus
{
    optional int64 userId = 1;
    optional int32 isOnline = 2;
    optional string createRoomIds = 3;
    optional string lastRoomId = 4;
    optional int32 gameId = 5;
}

message STC_Pay_SucceedMsg
{
    optional string orderId = 1;
    optional int32 diamond = 2;
}

message CTS_Chat_SendMsg
{
    optional int32 type = 1;
    optional bytes msg = 2;
    repeated int64 consumeIds = 3;
    optional int64 tableId = 4;
    optional int32 index = 5;
    optional int32 channels = 6;
    optional int32 samples = 7;
}

message STC_Chat_ContentMsg
{
    optional int32 type = 1;
    optional bytes msg = 2;
    optional int64 sendId = 3;
    optional int64 tableId = 4;
    optional int32 index = 5;
    optional int32 channels = 6;
    optional int32 samples = 7;
}

message STC_PlatformLoginMsg
{
    optional int64 userId = 1;
    optional string refreshToken = 2;
    optional int32 status = 3;
    optional string loginIp = 4;
    optional SocialInfo socialInfo = 5;
    optional EconomyInfo economyInfo = 6;
    optional UserStatus userStatus = 7;
    optional string account = 8;
    optional string password = 9;
    optional string session = 10;
    optional string platformStr = 11;
    optional string gameServerIp = 12;
    optional string gameServerPort = 13;
    optional string chatPort = 14;
    optional GameInfo gameInfo = 15;
}

message GameInfo
{
    optional int64 userId = 1;
    optional int32 gameCount = 2;
    optional int32 dayGameCount = 3;
}

message STC_UserInfoMsg
{
    optional int64 userId = 1;
    optional string account = 2;
    optional int32 regChannel = 3;
    optional string os = 4;
    optional string loginIp = 5;
    optional SocialInfo socialInfo = 6;
    optional EconomyInfo economyInfo = 7;
    optional UserStatus userStatus = 8;
    optional string password = 9;
    optional GameInfo gameInfo = 10;
}

message STC_LoginMsg
{
    optional int64 userId = 1;
    optional string session = 2;
    optional int32 status = 3;
    optional string loginIp = 4;
    optional SocialInfo socialInfo = 5;
    optional EconomyInfo economyInfo = 6;
    optional UserStatus userStatus = 7;
    optional string account = 8;
    optional string password = 9;
    optional string gameServerIp = 10;
    optional string gameServerPort = 11;
    optional string chatPort = 12;
    optional GameInfo gameInfo = 13;
}

message STC_JiaXin_Refuse_InRoom_ResultMsg
{
    optional int64 tableId = 1;
    optional bool isAddRoom = 2;
}

message CTS_JiaXin_Refuse_InRoomMsg
{
    optional int64 tableId = 1;
    optional bool isAddRoom = 2;
}

message STC_Record_GdyMsg
{
    optional int64 shareId = 1;
    optional int64 tableId = 2;
    optional string tableName = 3;
    optional int32 postionNum = 4;
    optional int32 gameStatus = 5;
    optional int64 masterUserId = 6;
    repeated SimplePlayer playerList = 7;
    optional GdyRecord recordList = 8;
}

message GdyRecord
{
    repeated PlayerCardData priCardsList = 1;
    optional int32 bankPosId = 2;
    optional int32 handId = 3;
    repeated OperateData operateList = 4;
}

message PlayerCardData
{
    optional int32 posId = 1;
    repeated int32 priCards = 2;
}

message OperateData
{
    optional int32 posId = 1;
    optional int32 action = 2;
    repeated int32 cards = 3;
    repeated int32 beCards = 4;
    optional int32 cardsType = 5;
}

message SimplePlayer
{
    optional int64 userId = 1;
    optional int32 gender = 2;
    optional string nickName = 3;
    optional string headImg = 4;
    optional int32 posId = 5;
    optional int32 status = 6;
    optional int32 online = 7;
    optional string ip = 8;
    optional int32 gameCount = 9;
}

message STC_Jiaxin_Table_ActInTable_PublishMsg
{
    optional int64 tableId = 1;
    optional int32 posId = 2;
    optional SimplePlayer player = 3;
}

message STC_Jiaxin_Table_ActInTableMsg
{
    optional int64 tableId = 1;
    optional int64 password = 2;
    optional string tableName = 3;
    optional int32 handNum = 4;
    optional int32 postionNum = 5;
    repeated SimplePlayer playerList = 6;
    optional TeoError error = 7;
    optional int32 specialType = 8;
}

message STC_JiaXin_Table_Quit_NotificaMsg
{
    optional int64 tableId = 1;
    optional int32 posId = 2;
    repeated SimplePlayer playerList = 3;
}

message STC_Ssz_OfflineMsg
{
    optional int64 tableId = 1;
    optional int64 password = 2;
    optional string tableName = 3;
    optional int32 handNum = 4;
    optional int32 postionNum = 5;
    optional int32 gameStatus = 6;
    optional int32 actionId = 7;
    optional int32 handId = 8;
    repeated int32 scoreList = 9;
    repeated SimplePlayer playerList = 10;
    repeated int32 playerCardNum = 11;
    repeated int32 priCards = 12;
    optional int32 specialType = 13;
    repeated int32 readyStatus = 14;
}

message STC_Ssz_ContinueMsg
{
    optional int64 tableId = 1;
    optional int64 password = 2;
    optional string tableName = 3;
    optional int32 handNum = 4;
    optional int32 postionNum = 5;
    optional int32 gameStatus = 6;
    optional int32 actionId = 7;
    optional int32 handId = 8;
    repeated int32 scoreList = 9;
    repeated SimplePlayer playerList = 10;
    repeated int32 playerCardNum = 11;
    repeated int32 priCards = 12;
    optional int32 specialType = 13;
    repeated int32 readyStatus = 14;
}

message STC_Ssz_OperateNoticeMsg
{
    optional int64 tableId = 1;
    optional int32 posId = 2;
    optional bool isSpecialType = 3;
    repeated int32 beCards = 4;
}

message STC_Record_Ssz_List_RoomMsg
{
    optional RoomInfo roomInfo = 1;
    repeated SszRecord sszRecordList = 2;
}

message SszRecord
{
    repeated PlayerCardData priCardsList = 1;
    optional int32 bankPosId = 2;
    optional int32 handId = 3;
    repeated OperateData operateList = 4;
    optional int32 winPosId = 5;
    repeated SszSettleItem settleLst = 6;
}

message RoomInfo
{
    optional int64 tableId = 1;
    optional int64 password = 2;
    optional string tableName = 3;
    optional int32 handNum = 4;
    optional int32 postionNum = 5;
    optional int32 gameStatus = 6;
    optional int32 gameId = 7;
    optional int64 masterUserId = 8;
    repeated SimplePlayer playerList = 9;
}

message STC_L_InviteMsg
{
    optional int32 result = 1;
    optional string resultMsg = 2;
}

message CTS_L_InviteMsg
{
    optional int64 inviteUid = 1;
}

message STC_L_Economy_UpdateMsg
{
    optional EconomyInfo economyInfo = 1;
}

